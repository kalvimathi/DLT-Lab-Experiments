import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense

# Step 1: Load Dataset
vocab_size = 10000  # Limit the vocabulary size to 10,000 words
max_len = 200  # Maximum length of each review

# Load the IMDB dataset
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=vocab_size)

# Step 2: Pad Sequences to ensure uniform length
x_train = pad_sequences(x_train, maxlen=max_len)
x_test = pad_sequences(x_test, maxlen=max_len)

# Step 3: Build the RNN Model
model = Sequential()

# Embedding Layer: Convert word indices into dense vectors
model.add(Embedding(vocab_size, 32, input_length=max_len))

# SimpleRNN Layer: A simple RNN with 64 units
model.add(SimpleRNN(64))

# Output Layer: A dense layer for binary classification
model.add(Dense(1, activation='sigmoid'))

# Step 4: Compile and Train the Model
model.compile(optimizer='adam', 
              loss='binary_crossentropy', 
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, 
          epochs=3, 
          batch_size=64, 
          validation_split=0.2, 
          verbose=1)

# Step 5: Evaluate the Model on Test Data
loss, accuracy = model.evaluate(x_test, y_test, verbose=0)
print(f"Test Accuracy: {accuracy:.2f}")
